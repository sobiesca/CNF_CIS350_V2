import tkinter as tk
from tkinter import filedialog
import feedparser
import webbrowser

# Handles everything with creating the UI and basic filtering fields
class NewsFilter:
    def __init__(self, root):
        self.root = root
        self.root.title("Cybersecurity News Filter")

        # User input field of UI
        self.filter_entry = tk.Entry(root, width=50)
        self.filter_entry.grid(row=0, column=0, padx=10, pady=10, sticky='w')
        self.filter_entry.insert(0, "")

        # Filter button
        filter_button = tk.Button(root, text="Filter", command=self.filter_news)
        filter_button.grid(row=0, column=2, padx=10, pady=10)

        # Display area for RSS news information
        self.news_list = tk.Listbox(root, width=70, height=20)
        self.news_list.grid(row=1, column=0, columnspan=3, padx=10, pady=10)

        # Label for the filtered RSS news information
        label = tk.Label(root, text="Filtered News")
        label.grid(row=2, column=0, columnspan=3)

        # List of the URL's we want to extract information from
        self.urls = ['https://www.cisa.gov/news.xml',
                     'https://www.cisa.gov/cybersecurity-advisories/ics-advisories.xml',
                     'https://feeds.feedburner.com/TheHackersNews']

    # Filters information and displays it in the news_list
    def filter_news(self):
        keywords = self.filter_entry.get()
        self.news_list.delete(0, tk.END)

        # Loops through the list of URL's
        # Uses feedparser to extract the data we want from the RSS feeds we want to get information from
        for url in self.urls:
            rss_feed = feedparser.parse(url)

            # Loops through the specific URL the previous loop is currently on
            # And extracts the Title, Published Date, and Link
            for entry in rss_feed.entries:
                title = entry.get('title', '')  # Accessing 'title' key from the dictionary
                pub_date = entry.get('published', '')  # Accessing 'published' key
                link = entry.get('link', '')  # Accessing 'link' key

                # Filters information by keywords in the title of RSS feed entry
                # Adds information we wanted from the RSS feed and displays it in the news_list
                if keywords.lower() in title.lower():
                    self.news_list.insert(tk.END, f"Title: {title}")
                    self.news_list.insert(tk.END, f"Published: {pub_date}")
                    self.news_list.insert(tk.END, f"Link: {link}")
                    self.news_list.insert(tk.END, '')

# Handles everything with opening specific links in the filtered news_list
class NewsViewer:
    def __init__(self, root, news_list):
        self.root = root

        # Button to open the link generated by the filtering
        open_link_button = tk.Button(root, text="Open Link", command=self.open_link)
        open_link_button.grid(row=2, column=1, padx=10, pady=10)

        self.news_list = news_list

    # Allows user to open the selected link using the webbrowser library
    def open_link(self):
        # Current selected filtered information
        selected = self.news_list.curselection()
        # Checks if you have something selected
        # Splits required information for opening the web browser link so no errors occur
        if selected:
            index = selected[0]
            link = self.news_list.get(index).split("Link: ")[1]
            webbrowser.open(link)

# Handles everything dealing with saving the filtered news_list
class NewsSaver:
    def __init__(self, root, news_list):
        self.root = root

        # Save button to save filtered information
        save_button = tk.Button(root, text="Save", command=self.save_data)
        save_button.grid(row=2, column=2, padx=10, pady=10)

        self.news_list = news_list

    # Allows user to save the filtered data in the news_list
    def save_data(self):
        selected = self.news_list.get(0, tk.END)  # Get all displayed news

        # Open file dialog for selecting the file path
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        
        if file_path:
            # Writes the information to the selected file path
            with open(file_path, 'w') as file:
                for news_item in selected:
                    file.write(news_item + '\n')



def main():
    root = tk.Tk()

    news_filter = NewsFilter(root)
    news_viewer = NewsViewer(root, news_filter.news_list)
    news_saver = NewsSaver(root, news_filter.news_list)

    root.mainloop()


if __name__ == '__main__':
    main()
